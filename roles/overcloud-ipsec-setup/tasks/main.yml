---
- name: Install libreswan package
  yum: name=libreswan state=latest

- name: Initialize ipsec nss database
  command: ipsec initnss
  args:
    creates: /etc/ipsec.d/*db

- name: Start and enable ipsec service
  service:
    name: ipsec
    enabled: yes
    state: started

- include: firewall.yml

- name: Get the current node's internal API IP address
  shell: grep "{{ ansible_hostname }}.internalapi" /etc/hosts | awk '{print $1}'
  register: current_ip_register

- name: Set the current IP fact
  set_fact:
    current_ip: "{{current_ip_register.stdout}}"

- name: Get the rest of the nodes' internal API IP addresses
  shell: grep "internalapi" /etc/hosts | grep -v "{{ current_ip }}" | grep -v "{{ overcloud_internal_api_fqdn }}" | awk '{print $1}'
  register: other_ips_register

- name: Get the overcloud internal API VIP IP address
  shell: grep "{{ overcloud_internal_api_fqdn }}" /etc/hosts | awk '{print $1}'
  register: internal_api_vip_register 

- name: Set the rest of the node IPs/VIP facts
  set_fact:
    other_ips: "{{other_ips_register.stdout_lines}}"
    internal_api_vip: "{{internal_api_vip_register.stdout}}"

- name: Determine if pacemaker is running
  shell: systemctl is-active pacemaker
  register: pacemaker_running
  ignore_errors: yes

- name: Determine which node is hosting the VIP
  shell: pcs status | grep ip- | sed 's/ip-//' | awk '{print $1, "\t", $4}' | grep "{{ internal_api_vip }}" | awk '{print $2}'
  register: node_hosting_the_vip
  when: pacemaker_running.stdout == 'active'

- name: Set variable for node hosting the vip
  set_fact:
    node_is_hosting_vip: true
  when:
  - pacemaker_running.stdout == 'active'
  - node_hosting_the_vip.stdout == ansible_hostname

- name: Set variable for node not hosting the vip
  set_fact:
    node_is_hosting_vip: false
  when: pacemaker_running.stdout != 'active' or (node_hosting_the_vip is defined and node_hosting_the_vip.stdout != ansible_hostname)

- name: Write ipsec.secrets file
  template:
    src: ipsec.secrets.j2
    dest: /etc/ipsec.secrets
    mode: '0600'
  notify:
  - Restart ipsec

- name: Write ipsec.conf file
  template:
    src: ipsec.conf.j2
    dest: /etc/ipsec.d/overcloud-tunnels.conf
    mode: '0640'
  notify:
  - Restart ipsec

- meta: flush_handlers

# TODO: Remove these. We restart ipsec, so these shouldn't be needed.
#- name: Get tunnel names
#  shell: cat {{ ipsec_conf_file }} | grep conn | awk '{print $2}'
#  register: conn_names_register
#
#- name: Add IPSEC tunnels
#  command: ipsec auto --add {{ item }}
#  with_items:
#  - "{{ conn_names_register.stdout_lines }}"
#
#- name: Open IPSEC tunnels
#  command: ipsec auto --up {{ item }}
#  with_items:
#  - "{{ conn_names_register.stdout_lines }}"

- name: Copy service restart script
  template:
    src: restart-services.sh.j2
    dest: /usr/sbin/tripleo-ipsec-restart-services.sh
    mode: '0700'

# TODO: Maybe do this only if the ipsec configuration changed.
- name: Restart services on node hosting VIP
  command: /usr/sbin/tripleo-ipsec-restart-services.sh
  when: 
  - pacemaker_running.stdout == 'active'
  - node_hosting_the_vip.stdout == ansible_hostname

- name: Restart services rest of the nodes
  command: /usr/sbin/tripleo-ipsec-restart-services.sh
  when: pacemaker_running.stdout != 'active' or (node_hosting_the_vip is defined and node_hosting_the_vip.stdout != ansible_hostname)
