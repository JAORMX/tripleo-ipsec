---
- include: setup.yml

- name: Get the current node's internal API IP address
  shell: grep "{{ ansible_hostname }}.internalapi$" /etc/hosts | awk '{print $1}'
  register: current_internalapi_ip_register

# This outputs the hosts as lines consisting of <fqdn>,<IP>
- name: Get the controller internal API hostnames and IP addresses
  shell: grep "{{ overcloud_controller_identifier }}.*internalapi$" /etc/hosts | awk '{print $3","$1}'
  register: internalapi_controllers_register

- name: Get the current node's storage IP address
  shell: grep "{{ ansible_hostname }}.storage$" /etc/hosts | awk '{print $1}'
  register: current_storage_ip_register

# This outputs the hosts as lines consisting of <fqdn>,<IP>
- name: Get the controller storage hostnames and IP addresses
  shell: grep "{{ overcloud_controller_identifier }}.*storage$" /etc/hosts | awk '{print $3","$1}'
  register: storage_controllers_register

- name: Get the overcloud internal API VIP address
  shell: hiera -c /etc/puppet/hiera.yaml internal_api_virtual_ip
  register: internalapi_vip_register

- name: Get the overcloud redis VIP address
  shell: hiera -c /etc/puppet/hiera.yaml redis_vip
  register: redis_vip_register

- name: Get the overcloud storage VIP address
  shell: hiera -c /etc/puppet/hiera.yaml storage_virtual_ip
  register: storage_vip_register

- name: Set the networks IPs facts
  set_fact:
    networks:
      internalapi:
        current_ip: "{{current_internalapi_ip_register.stdout}}"
        controllers: "{{internalapi_controllers_register.stdout_lines}}"
        vips:
          internalapi: "{{internalapi_vip_register.stdout}}"
          redis: "{{redis_vip_register.stdout}}"
      storage:
        current_ip: "{{current_storage_ip_register.stdout}}"
        controllers: "{{storage_controllers_register.stdout_lines}}"
        vips:
          storage: "{{storage_vip_register.stdout}}"

- name: Determine if pacemaker is running
  shell: systemctl is-active pacemaker
  register: pacemaker_running
  ignore_errors: yes

# This returns the hostname (short) of the node hosting the VIP
- name: Determine which node is hosting the VIP
  shell: pcs status | grep ip- | sed 's/ip-//' | awk '{print $1"\t"$4}' | grep "{{ networks['internalapi']['vips']['internalapi'] }}" | awk '{print $2}'
  register: node_hosting_the_vip
  when: pacemaker_running.stdout == 'active'

- name: Add uniqueids = no to ipsec setup configuration
  lineinfile:
    dest: /etc/ipsec.conf
    regexp: '^\s+uniqueids'
    insertafter: '^config setup'
    line: "\tuniqueids=no"
  notify:
  - Restart ipsec

- include: ipsec-conf.yml
  with_dict: "{{ networks }}"

- include: firewall.yml

- meta: flush_handlers

# Permissions gotten from http://www.linux-ha.org/doc/dev-guides/_installing_and_packaging_resource_agents.html
- name: Install TripleO IPSEC resource agent
  copy:
    src: ipsec-resource-agent.sh
    dest: /usr/lib/ocf/resource.d/heartbeat/tripleo-ipsec
    mode: '0755'
  register: resource_agent

- include: resource-agent.yml resource_agent_name=tripleo-ipsec-internalapi specific_tunnel=overcloud-internalapi-vip-tunnel specific_vip={{ networks['internalapi']['vips']['internalapi'] }}

- include: resource-agent.yml resource_agent_name=tripleo-ipsec-redis specific_tunnel=overcloud-redis-vip-tunnel specific_vip={{ networks['internalapi']['vips']['redis'] }}
